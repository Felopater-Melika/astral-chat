// Generated by CodiumAI

import { MessageGateway } from './message.gateway';
import { PrismaService } from 'nestjs-prisma';
import { MessageService } from '../services/message.service';

describe('MessageGateway_class', () => {
  // Tests that handleConnection logs the correct message
  it('test_handle_connection_logs_message', () => {
    const client = { id: '123' };
    const messageGateway = new MessageGateway(
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      new MessageService(new PrismaService(), new MessageGateway())
    );
    const consoleSpy = jest.spyOn(console, 'log');
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    messageGateway.handleConnection(client);
    expect(consoleSpy).toHaveBeenCalledWith(`Client connected: ${client.id}`);
  });

  // Tests that handleDisconnect logs the correct message
  it('test_handle_disconnect_logs_message', () => {
    const client = { id: '123' };
    const messageGateway = new MessageGateway(
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      new MessageService(new PrismaService(), new MessageGateway())
    );
    const consoleSpy = jest.spyOn(console, 'log');
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    messageGateway.handleDisconnect(client);
    expect(consoleSpy).toHaveBeenCalledWith(
      `Client disconnected: ${client.id}`
    );
  });

  // Tests that handleMessage calls messageService.ts.create with the correct arguments
  it('test_handle_message_calls_create_with_correct_arguments', async () => {
    const payload = { senderId: '1', conversationId: '2', body: 'hello' };
    const messageServiceMock = {
      create: jest.fn().mockResolvedValue({ id: 1, ...payload }),
    };

    // Create a mock client with an emit method
    const clientMock = {
      emit: jest.fn(),
    };

    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const messageGateway = new MessageGateway(messageServiceMock);
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    await messageGateway.handleMessage(clientMock, payload);
    expect(messageServiceMock.create).toHaveBeenCalledWith(
      payload,
      payload.senderId
    );
  });

  // Tests that handleMessage emits the correct event with the correct payload
  it('test_handle_message_emits_correct_event_with_payload', async () => {
    const payload = { senderId: '1', conversationId: '2', body: 'hello' };
    const messageServiceMock = {
      create: jest.fn().mockResolvedValue({ id: 1, ...payload }),
    };
    const client = { emit: jest.fn() };
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    const messageGateway = new MessageGateway(messageServiceMock);
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-ignore
    await messageGateway.handleMessage(client, payload);
    expect(client.emit).toHaveBeenCalledWith('newMessage', {
      id: 1,
      ...payload,
    });
  });
});
