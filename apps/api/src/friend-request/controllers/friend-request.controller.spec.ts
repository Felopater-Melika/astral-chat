// Generated by CodiumAI

/*
Code Analysis

Main functionalities:
The FriendRequestController class is responsible for handling HTTP requests related to friend requests. It uses the FriendRequestService class to perform CRUD operations on friend requests. The main functionalities of this class include creating a new friend request, retrieving all friend requests for a user, retrieving a specific friend request by ID, updating the status of a friend request, and deleting a friend request.

Methods:
- create: handles POST requests to create a new friend request
- findAll: handles GET requests to retrieve all friend requests for a user
- findOne: handles GET requests to retrieve a specific friend request by ID
- update: handles PATCH requests to update the status of a friend request
- remove: handles DELETE requests to delete a friend request

Fields:
- friendRequestService: an instance of the FriendRequestService class used to perform CRUD operations on friend requests.
*/

import { FriendRequestController } from './friend-request.controller';
import { BadRequestException } from '@nestjs/common';

describe('FriendRequestController_class', () => {
  // Tests that create method works with valid input
  it('test_create_valid_input', async () => {
    const mockCreateFriendRequestDto = { senderId: '1', recipientId: '2' };
    const mockFriendRequestService = {
      create: jest
        .fn()
        .mockResolvedValue({ id: '1', ...mockCreateFriendRequestDto }),
    };
    const friendRequestController = new FriendRequestController(
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      mockFriendRequestService
    );
    const result = await friendRequestController.create(
      mockCreateFriendRequestDto
    );
    expect(mockFriendRequestService.create).toHaveBeenCalledWith(
      mockCreateFriendRequestDto
    );
    expect(result).toEqual({ id: '1', ...mockCreateFriendRequestDto });
  });

  // Tests that findAll method works with valid input
  it('test_find_all_valid_input', async () => {
    const mockUserId = '1';
    const mockFriendRequests = [{ id: '1', senderId: '1', recipientId: '2' }];
    const mockFriendRequestService = {
      findAll: jest.fn().mockResolvedValue(mockFriendRequests),
    };
    const friendRequestController = new FriendRequestController(
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      mockFriendRequestService
    );
    const result = await friendRequestController.findAll(mockUserId);
    expect(mockFriendRequestService.findAll).toHaveBeenCalledWith(mockUserId);
    expect(result).toEqual(mockFriendRequests);
  });

  // Tests that findOne method works with valid input
  it('test_find_one_valid_input', async () => {
    const mockId = '1';
    const mockFriendRequest = { id: '1', senderId: '1', recipientId: '2' };
    const mockFriendRequestService = {
      findOne: jest.fn().mockResolvedValue(mockFriendRequest),
    };
    const friendRequestController = new FriendRequestController(
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      mockFriendRequestService
    );
    const result = await friendRequestController.findOne(mockId);
    expect(mockFriendRequestService.findOne).toHaveBeenCalledWith(mockId);
    expect(result).toEqual(mockFriendRequest);
  });

  // Tests that update method works with valid input
  it('test_update_valid_input', async () => {
    const mockId = '1';
    const mockUpdateFriendRequestDto = { status: 'ACCEPTED' };
    const mockFriendRequest = {
      id: '1',
      senderId: '1',
      recipientId: '2',
      status: 'ACCEPTED',
    };
    const mockFriendRequestService = {
      update: jest.fn().mockResolvedValue(mockFriendRequest),
    };
    const friendRequestController = new FriendRequestController(
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      mockFriendRequestService
    );
    const result = await friendRequestController.update(
      mockId,

      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      mockUpdateFriendRequestDto
    );
    expect(mockFriendRequestService.update).toHaveBeenCalledWith(
      mockId,
      mockUpdateFriendRequestDto
    );
    expect(result).toEqual(mockFriendRequest);
  });

  // Tests that remove method works with valid input
  it('test_remove_valid_input', async () => {
    const mockId = '1';
    const mockFriendRequest = { id: '1', senderId: '1', recipientId: '2' };
    const mockFriendRequestService = {
      remove: jest.fn().mockResolvedValue(mockFriendRequest),
    };
    const friendRequestController = new FriendRequestController(
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      mockFriendRequestService
    );
    const result = await friendRequestController.remove(mockId);
    expect(mockFriendRequestService.remove).toHaveBeenCalledWith(mockId);
    expect(result).toEqual(mockFriendRequest);
  });

  // Tests that create method throws BadRequestException when senderId is missing
  it('test_create_missing_sender_id', async () => {
    const mockCreateFriendRequestDto = { recipientId: '2' };
    const mockFriendRequestService = {
      create: jest
        .fn()
        .mockRejectedValue(
          new BadRequestException('senderId must be provided')
        ),
    };
    const friendRequestController = new FriendRequestController(
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      mockFriendRequestService
    );
    await expect(
      // eslint-disable-next-line @typescript-eslint/ban-ts-comment
      // @ts-ignore
      friendRequestController.create(mockCreateFriendRequestDto)
    ).rejects.toThrow(BadRequestException);
  });
});
