// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(uuid())
  firstName      String
  lastName       String
  email          String    @unique
  emailVerified  Boolean
  hashedPassword String
  username       String    @unique
  messages       Message[]
  conversations  ConversationParticipant[]
  sessions       Session[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}


model VerificationToken {
  id         String  @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id              String    @id @default(uuid())
  participants    ConversationParticipant[]
  messages        Message[] @relation("conversationMessages")
  latestMessage   Message?   @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  latestMessageId String?    @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model ConversationParticipant {
  id              String    @id @default(uuid())
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  conversation    Conversation @relation(fields: [conversationId], references: [id])
  conversationId  String
  hasSeenLatestMessage Boolean
}

model Message {
  id              String        @id @default(uuid())
  conversation    Conversation  @relation(name: "conversationMessages", fields: [conversationId], references: [id])
  conversationId  String
  isLatestIn      Conversation? @relation("latestConversationMessage")
  sender          User          @relation(fields: [senderId], references: [id])
  senderId        String
  body            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}
