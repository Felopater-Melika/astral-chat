// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String @id @default(uuid())
  firstName String
  lastName  String

  email          String  @unique
  emailVerified  Boolean
  hashedPassword String
  username       String  @unique

  messages      Message[]
  conversations ConversationParticipant[]

  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  VerificationToken      VerificationToken[]
  sentFriendRequests     FriendRequest[]     @relation("FriendRequestsSent")
  receivedFriendRequests FriendRequest[]     @relation("FriendRequestsReceived")
}

model VerificationToken {
  id      String   @id @default(uuid())
  token   String   @unique
  expires DateTime
  userId  String
  user    User?    @relation(fields: [userId], references: [id])
}

model Conversation {
  id              String                    @id @default(uuid())
  participants    ConversationParticipant[]
  messages        Message[]                 @relation("conversationMessages")
  latestMessage   Message?                  @relation(name: "latestConversationMessage", fields: [latestMessageId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  latestMessageId String?                   @unique
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
}

model ConversationParticipant {
  id                   String       @id @default(uuid())
  user                 User         @relation(fields: [userId], references: [id])
  userId               String
  conversation         Conversation @relation(fields: [conversationId], references: [id])
  conversationId       String
  hasSeenLatestMessage Boolean
}

model Message {
  id             String        @id @default(uuid())
  conversation   Conversation  @relation(name: "conversationMessages", fields: [conversationId], references: [id])
  conversationId String
  isLatestIn     Conversation? @relation("latestConversationMessage")
  sender         User          @relation(fields: [senderId], references: [id])
  senderId       String
  body           String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequest {
  id          String              @id @default(uuid())
  status      FriendRequestStatus @default(PENDING)
  senderId    String
  sender      User                @relation("FriendRequestsSent", fields: [senderId], references: [id])
  recipientId String
  recipient   User                @relation("FriendRequestsReceived", fields: [recipientId], references: [id])
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
}
